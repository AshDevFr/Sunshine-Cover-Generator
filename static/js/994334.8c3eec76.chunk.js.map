{"version":3,"file":"static/js/994334.8c3eec76.chunk.js","mappings":"sNAEIA,EAAc,CAAC,EA6DfC,EAAUA,KAAA,CACZC,WAAY,WACZC,WAAY,WACZC,QAAS,KACTC,IAAK,oHACLC,cAAe,CAAC,EAChBC,MAAO,CAAC,IAENL,EAAa,WACbM,EAAWA,CAACC,EAAOC,IArEPC,EAACC,EAAMH,EAAOC,KAC5B,MAAMG,EAAW,GACXC,EAASL,EAAQ,CAACA,GAASM,OAAOC,KAAKJ,EAAKL,OAClD,IAAK,MAAMU,KAAUH,EAAQ,CAC3B,GAAwB,qBAAbI,SACT,SAEF,IAAKN,EAAKL,MAAMU,GACd,MAAM,IAAIE,MAAM,YAAYP,EAAKV,oCAAoCe,KAEvE,MAAMG,EAAUV,GAASU,SAAWL,OAAOC,KAAKJ,EAAKL,MAAMU,IAC3D,IAAK,MAAMI,KAAUD,EAAS,CAC5B,IAAKR,EAAKL,MAAMU,GAAQI,GACtB,MAAM,IAAIF,MAAM,YAAYP,EAAKV,sCAAsCmB,cAAmBJ,KAE5F,MAAMK,EAAUZ,GAASY,SAAWP,OAAOC,KAAKJ,EAAKL,MAAMU,GAAQI,IACnE,IAAK,MAAME,KAAUD,EAAS,CAC5B,IAAIE,EAAOZ,EAAKL,MAAMU,KAAUI,KAAUE,GAC1C,IAAKC,EACH,MAAM,IAAIL,MAAM,WAAWE,aAAkBE,2BAAgCX,EAAKV,eAEpF,IAAIuB,EAAU,GAAGb,EAAKV,cAAce,KAAUI,KAAUE,IACxD,MAAMG,EAAkB1B,EAAYyB,GACpC,GAAIC,EAAiB,CACnBb,EAASc,KAAKD,GACd,QACF,CACA,MAAME,GAASC,EAAAA,EAAAA,IAAY,YAAYjB,EAAKV,mBAAmB4B,KAAKC,UAAU,CAC5EtB,MAAOQ,EACPI,SACAE,cAEIS,EAAW,IAAId,SAASN,EAAKV,WAAY,OAAOsB,qBAAyB,CAC7EH,SACAZ,MAAOQ,EACPgB,aAAcrB,EAAKN,cAAciB,KAE7BW,EAAUF,EAASG,OAAOC,MAAK,MAClC1B,GAAS2B,UAAYA,UAAU9B,MAAM+B,IAAIN,IAC1CO,EAAAA,EAAAA,IAAeX,EAAO,IACrBY,OAAOC,IAER,MADAzC,EAAYyB,QAAWiB,EACjBD,CAAG,IAEXzC,EAAYyB,GAAWS,EACvBrB,EAASc,KAAKO,EAChB,CACF,CACF,CACA,MAAO,CACLhC,WAAYU,EAAKV,WACjBK,MAAOK,EAAKL,MACZD,cAAeM,EAAKN,cACpBqC,cAAeA,IAAMC,QAAQC,IAAIhC,GAAUuB,MAAK,KACxC,IAET,EAcMzB,CAAUV,IAAWQ,EAAOC,E","sources":["../node_modules/@remotion/google-fonts/dist/esm/Linefont.mjs"],"sourcesContent":["// src/base.ts\nimport {continueRender, delayRender} from \"remotion\";\nvar loadedFonts = {};\nvar loadFonts = (meta, style, options) => {\n  const promises = [];\n  const styles = style ? [style] : Object.keys(meta.fonts);\n  for (const style2 of styles) {\n    if (typeof FontFace === \"undefined\") {\n      continue;\n    }\n    if (!meta.fonts[style2]) {\n      throw new Error(`The font ${meta.fontFamily} does not have a style ${style2}`);\n    }\n    const weights = options?.weights ?? Object.keys(meta.fonts[style2]);\n    for (const weight of weights) {\n      if (!meta.fonts[style2][weight]) {\n        throw new Error(`The font ${meta.fontFamily} does not  have a weight ${weight} in style ${style2}`);\n      }\n      const subsets = options?.subsets ?? Object.keys(meta.fonts[style2][weight]);\n      for (const subset of subsets) {\n        let font = meta.fonts[style2]?.[weight]?.[subset];\n        if (!font) {\n          throw new Error(`weight: ${weight} subset: ${subset} is not available for '${meta.fontFamily}'`);\n        }\n        let fontKey = `${meta.fontFamily}-${style2}-${weight}-${subset}`;\n        const previousPromise = loadedFonts[fontKey];\n        if (previousPromise) {\n          promises.push(previousPromise);\n          continue;\n        }\n        const handle = delayRender(`Fetching ${meta.fontFamily} font ${JSON.stringify({\n          style: style2,\n          weight,\n          subset\n        })}`);\n        const fontFace = new FontFace(meta.fontFamily, `url(${font}) format('woff2')`, {\n          weight,\n          style: style2,\n          unicodeRange: meta.unicodeRanges[subset]\n        });\n        const promise = fontFace.load().then(() => {\n          (options?.document ?? document).fonts.add(fontFace);\n          continueRender(handle);\n        }).catch((err) => {\n          loadedFonts[fontKey] = undefined;\n          throw err;\n        });\n        loadedFonts[fontKey] = promise;\n        promises.push(promise);\n      }\n    }\n  }\n  return {\n    fontFamily: meta.fontFamily,\n    fonts: meta.fonts,\n    unicodeRanges: meta.unicodeRanges,\n    waitUntilDone: () => Promise.all(promises).then(() => {\n      return;\n    })\n  };\n};\n\n// src/Linefont.ts\nvar getInfo = () => ({\n  fontFamily: \"Linefont\",\n  importName: \"Linefont\",\n  version: \"v3\",\n  url: \"https://fonts.googleapis.com/css2?family=Linefont:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900\",\n  unicodeRanges: {},\n  fonts: {}\n});\nvar fontFamily = \"Linefont\";\nvar loadFont = (style, options) => {\n  return loadFonts(getInfo(), style, options);\n};\nexport {\n  loadFont,\n  getInfo,\n  fontFamily\n};\n"],"names":["loadedFonts","getInfo","fontFamily","importName","version","url","unicodeRanges","fonts","loadFont","style","options","loadFonts","meta","promises","styles","Object","keys","style2","FontFace","Error","weights","weight","subsets","subset","font","fontKey","previousPromise","push","handle","delayRender","JSON","stringify","fontFace","unicodeRange","promise","load","then","document","add","continueRender","catch","err","undefined","waitUntilDone","Promise","all"],"sourceRoot":""}