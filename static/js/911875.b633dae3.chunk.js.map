{"version":3,"file":"static/js/911875.b633dae3.chunk.js","mappings":"sNAEIA,EAAc,CAAC,EA6DfC,EAAUA,KAAA,CACZC,WAAY,UACZC,WAAY,UACZC,QAAS,KACTC,IAAK,qFACLC,cAAe,CACbC,QAAS,+JACTC,WAAY,iHACZC,MAAO,qFACP,YAAa,oIACbC,MAAO,sLAETC,MAAO,CACLC,OAAQ,CACN,IAAO,CACLL,QAAS,wEACTC,WAAY,wEACZC,MAAO,wEACP,YAAa,wEACbC,MAAO,uEAET,IAAO,CACLH,QAAS,wEACTC,WAAY,wEACZC,MAAO,wEACP,YAAa,wEACbC,MAAO,uEAET,IAAO,CACLH,QAAS,wEACTC,WAAY,wEACZC,MAAO,wEACP,YAAa,wEACbC,MAAO,uEAET,IAAO,CACLH,QAAS,wEACTC,WAAY,wEACZC,MAAO,wEACP,YAAa,wEACbC,MAAO,2EAKXR,EAAa,UACbW,EAAWA,CAACC,EAAOC,IA1GPC,EAACC,EAAMH,EAAOC,KAC5B,MAAMG,EAAW,GACXC,EAASL,EAAQ,CAACA,GAASM,OAAOC,KAAKJ,EAAKN,OAClD,IAAK,MAAMW,KAAUH,EAAQ,CAC3B,GAAwB,qBAAbI,SACT,SAEF,IAAKN,EAAKN,MAAMW,GACd,MAAM,IAAIE,MAAM,YAAYP,EAAKf,oCAAoCoB,KAEvE,MAAMG,EAAUV,GAASU,SAAWL,OAAOC,KAAKJ,EAAKN,MAAMW,IAC3D,IAAK,MAAMI,KAAUD,EAAS,CAC5B,IAAKR,EAAKN,MAAMW,GAAQI,GACtB,MAAM,IAAIF,MAAM,YAAYP,EAAKf,sCAAsCwB,cAAmBJ,KAE5F,MAAMK,EAAUZ,GAASY,SAAWP,OAAOC,KAAKJ,EAAKN,MAAMW,GAAQI,IACnE,IAAK,MAAME,KAAUD,EAAS,CAC5B,IAAIE,EAAOZ,EAAKN,MAAMW,KAAUI,KAAUE,GAC1C,IAAKC,EACH,MAAM,IAAIL,MAAM,WAAWE,aAAkBE,2BAAgCX,EAAKf,eAEpF,IAAI4B,EAAU,GAAGb,EAAKf,cAAcoB,KAAUI,KAAUE,IACxD,MAAMG,EAAkB/B,EAAY8B,GACpC,GAAIC,EAAiB,CACnBb,EAASc,KAAKD,GACd,QACF,CACA,MAAME,GAASC,EAAAA,EAAAA,IAAY,YAAYjB,EAAKf,mBAAmBiC,KAAKC,UAAU,CAC5EtB,MAAOQ,EACPI,SACAE,cAEIS,EAAW,IAAId,SAASN,EAAKf,WAAY,OAAO2B,qBAAyB,CAC7EH,SACAZ,MAAOQ,EACPgB,aAAcrB,EAAKX,cAAcsB,KAE7BW,EAAUF,EAASG,OAAOC,MAAK,MAClC1B,GAAS2B,UAAYA,UAAU/B,MAAMgC,IAAIN,IAC1CO,EAAAA,EAAAA,IAAeX,EAAO,IACrBY,OAAOC,IAER,MADA9C,EAAY8B,QAAWiB,EACjBD,CAAG,IAEX9C,EAAY8B,GAAWS,EACvBrB,EAASc,KAAKO,EAChB,CACF,CACF,CACA,MAAO,CACLrC,WAAYe,EAAKf,WACjBS,MAAOM,EAAKN,MACZL,cAAeW,EAAKX,cACpB0C,cAAeA,IAAMC,QAAQC,IAAIhC,GAAUuB,MAAK,KACxC,IAET,EAmDMzB,CAAUf,IAAWa,EAAOC,E","sources":["../node_modules/@remotion/google-fonts/dist/esm/Alkatra.mjs"],"sourcesContent":["// src/base.ts\nimport {continueRender, delayRender} from \"remotion\";\nvar loadedFonts = {};\nvar loadFonts = (meta, style, options) => {\n  const promises = [];\n  const styles = style ? [style] : Object.keys(meta.fonts);\n  for (const style2 of styles) {\n    if (typeof FontFace === \"undefined\") {\n      continue;\n    }\n    if (!meta.fonts[style2]) {\n      throw new Error(`The font ${meta.fontFamily} does not have a style ${style2}`);\n    }\n    const weights = options?.weights ?? Object.keys(meta.fonts[style2]);\n    for (const weight of weights) {\n      if (!meta.fonts[style2][weight]) {\n        throw new Error(`The font ${meta.fontFamily} does not  have a weight ${weight} in style ${style2}`);\n      }\n      const subsets = options?.subsets ?? Object.keys(meta.fonts[style2][weight]);\n      for (const subset of subsets) {\n        let font = meta.fonts[style2]?.[weight]?.[subset];\n        if (!font) {\n          throw new Error(`weight: ${weight} subset: ${subset} is not available for '${meta.fontFamily}'`);\n        }\n        let fontKey = `${meta.fontFamily}-${style2}-${weight}-${subset}`;\n        const previousPromise = loadedFonts[fontKey];\n        if (previousPromise) {\n          promises.push(previousPromise);\n          continue;\n        }\n        const handle = delayRender(`Fetching ${meta.fontFamily} font ${JSON.stringify({\n          style: style2,\n          weight,\n          subset\n        })}`);\n        const fontFace = new FontFace(meta.fontFamily, `url(${font}) format('woff2')`, {\n          weight,\n          style: style2,\n          unicodeRange: meta.unicodeRanges[subset]\n        });\n        const promise = fontFace.load().then(() => {\n          (options?.document ?? document).fonts.add(fontFace);\n          continueRender(handle);\n        }).catch((err) => {\n          loadedFonts[fontKey] = undefined;\n          throw err;\n        });\n        loadedFonts[fontKey] = promise;\n        promises.push(promise);\n      }\n    }\n  }\n  return {\n    fontFamily: meta.fontFamily,\n    fonts: meta.fonts,\n    unicodeRanges: meta.unicodeRanges,\n    waitUntilDone: () => Promise.all(promises).then(() => {\n      return;\n    })\n  };\n};\n\n// src/Alkatra.ts\nvar getInfo = () => ({\n  fontFamily: \"Alkatra\",\n  importName: \"Alkatra\",\n  version: \"v3\",\n  url: \"https://fonts.googleapis.com/css2?family=Alkatra:ital,wght@0,400;0,500;0,600;0,700\",\n  unicodeRanges: {\n    bengali: \"U+0951-0952, U+0964-0965, U+0980-09FE, U+1CD0, U+1CD2, U+1CD5-1CD6, U+1CD8, U+1CE1, U+1CEA, U+1CED, U+1CF2, U+1CF5-1CF7, U+200C-200D, U+20B9, U+25CC, U+A8F1\",\n    devanagari: \"U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+20F0, U+25CC, U+A830-A839, U+A8E0-A8FF, U+11B00-11B09\",\n    oriya: \"U+0951-0952, U+0964-0965, U+0B01-0B77, U+1CDA, U+1CF2, U+200C-200D, U+20B9, U+25CC\",\n    \"latin-ext\": \"U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF\",\n    latin: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD\"\n  },\n  fonts: {\n    normal: {\n      \"400\": {\n        bengali: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRP6J5wok.woff2\",\n        devanagari: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRO2J5wok.woff2\",\n        oriya: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRPWJ5wok.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROKJ5wok.woff2\",\n        latin: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROyJ5w.woff2\"\n      },\n      \"500\": {\n        bengali: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRP6J5wok.woff2\",\n        devanagari: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRO2J5wok.woff2\",\n        oriya: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRPWJ5wok.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROKJ5wok.woff2\",\n        latin: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROyJ5w.woff2\"\n      },\n      \"600\": {\n        bengali: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRP6J5wok.woff2\",\n        devanagari: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRO2J5wok.woff2\",\n        oriya: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRPWJ5wok.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROKJ5wok.woff2\",\n        latin: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROyJ5w.woff2\"\n      },\n      \"700\": {\n        bengali: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRP6J5wok.woff2\",\n        devanagari: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRO2J5wok.woff2\",\n        oriya: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJRPWJ5wok.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROKJ5wok.woff2\",\n        latin: \"https://fonts.gstatic.com/s/alkatra/v3/r05bGLZA5qhCYsyJROyJ5w.woff2\"\n      }\n    }\n  }\n});\nvar fontFamily = \"Alkatra\";\nvar loadFont = (style, options) => {\n  return loadFonts(getInfo(), style, options);\n};\nexport {\n  loadFont,\n  getInfo,\n  fontFamily\n};\n"],"names":["loadedFonts","getInfo","fontFamily","importName","version","url","unicodeRanges","bengali","devanagari","oriya","latin","fonts","normal","loadFont","style","options","loadFonts","meta","promises","styles","Object","keys","style2","FontFace","Error","weights","weight","subsets","subset","font","fontKey","previousPromise","push","handle","delayRender","JSON","stringify","fontFace","unicodeRange","promise","load","then","document","add","continueRender","catch","err","undefined","waitUntilDone","Promise","all"],"sourceRoot":""}