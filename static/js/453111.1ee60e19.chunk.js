"use strict";(self.webpackChunksunshine_image_generator=self.webpackChunksunshine_image_generator||[]).push([[453111],{453111:(n,t,o)=>{o.r(t),o.d(t,{fontFamily:()=>a,getInfo:()=>i,loadFont:()=>f});var e=o(662166),s={},i=()=>({fontFamily:"Fontdiner Swanky",importName:"FontdinerSwanky",version:"v23",url:"https://fonts.googleapis.com/css2?family=Fontdiner+Swanky:ital,wght@0,400",unicodeRanges:{latin:"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD"},fonts:{normal:{400:{latin:"https://fonts.gstatic.com/s/fontdinerswanky/v23/ijwOs4XgRNsiaI5-hcVb4hQgMvCD0uYVKw.woff2"}}}}),a="Fontdiner Swanky",f=(n,t)=>((n,t,o)=>{const i=[],a=t?[t]:Object.keys(n.fonts);for(const f of a){if("undefined"===typeof FontFace)continue;if(!n.fonts[f])throw new Error(`The font ${n.fontFamily} does not have a style ${f}`);const t=o?.weights??Object.keys(n.fonts[f]);for(const a of t){if(!n.fonts[f][a])throw new Error(`The font ${n.fontFamily} does not  have a weight ${a} in style ${f}`);const t=o?.subsets??Object.keys(n.fonts[f][a]);for(const r of t){let t=n.fonts[f]?.[a]?.[r];if(!t)throw new Error(`weight: ${a} subset: ${r} is not available for '${n.fontFamily}'`);let c=`${n.fontFamily}-${f}-${a}-${r}`;const l=s[c];if(l){i.push(l);continue}const h=(0,e.IH)(`Fetching ${n.fontFamily} font ${JSON.stringify({style:f,weight:a,subset:r})}`),F=new FontFace(n.fontFamily,`url(${t}) format('woff2')`,{weight:a,style:f,unicodeRange:n.unicodeRanges[r]}),w=F.load().then((()=>{(o?.document??document).fonts.add(F),(0,e._8)(h)})).catch((n=>{throw s[c]=void 0,n}));s[c]=w,i.push(w)}}}return{fontFamily:n.fontFamily,fonts:n.fonts,unicodeRanges:n.unicodeRanges,waitUntilDone:()=>Promise.all(i).then((()=>{}))}})(i(),n,t)}}]);
//# sourceMappingURL=453111.1ee60e19.chunk.js.map