"use strict";(self.webpackChunksunshine_image_generator=self.webpackChunksunshine_image_generator||[]).push([[931976],{931976:(t,o,s)=>{s.r(o),s.d(o,{fontFamily:()=>i,getInfo:()=>f,loadFont:()=>a});var n=s(662166),e={},f=()=>({fontFamily:"Judson",importName:"Judson",version:"v19",url:"https://fonts.googleapis.com/css2?family=Judson:ital,wght@0,400;0,700;1,400",unicodeRanges:{vietnamese:"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+0300-0301, U+0303-0304, U+0308-0309, U+0323, U+0329, U+1EA0-1EF9, U+20AB","latin-ext":"U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF",latin:"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD"},fonts:{italic:{400:{vietnamese:"https://fonts.gstatic.com/s/judson/v19/FeVTS0Fbvbc14VxhDYl4_bFbkg.woff2","latin-ext":"https://fonts.gstatic.com/s/judson/v19/FeVTS0Fbvbc14VxhDYl5_bFbkg.woff2",latin:"https://fonts.gstatic.com/s/judson/v19/FeVTS0Fbvbc14VxhDYl3_bE.woff2"}},normal:{400:{vietnamese:"https://fonts.gstatic.com/s/judson/v19/FeVRS0Fbvbc14VxhB7l15bU.woff2","latin-ext":"https://fonts.gstatic.com/s/judson/v19/FeVRS0Fbvbc14VxhBrl15bU.woff2",latin:"https://fonts.gstatic.com/s/judson/v19/FeVRS0Fbvbc14VxhCLl1.woff2"},700:{vietnamese:"https://fonts.gstatic.com/s/judson/v19/FeVSS0Fbvbc14Vxps5xg1ZRmq28.woff2","latin-ext":"https://fonts.gstatic.com/s/judson/v19/FeVSS0Fbvbc14Vxps5xg1JRmq28.woff2",latin:"https://fonts.gstatic.com/s/judson/v19/FeVSS0Fbvbc14Vxps5xg2pRm.woff2"}}}}),i="Judson",a=(t,o)=>((t,o,s)=>{const f=[],i=o?[o]:Object.keys(t.fonts);for(const a of i){if("undefined"===typeof FontFace)continue;if(!t.fonts[a])throw new Error(`The font ${t.fontFamily} does not have a style ${a}`);const o=s?.weights??Object.keys(t.fonts[a]);for(const i of o){if(!t.fonts[a][i])throw new Error(`The font ${t.fontFamily} does not  have a weight ${i} in style ${a}`);const o=s?.subsets??Object.keys(t.fonts[a][i]);for(const c of o){let o=t.fonts[a]?.[i]?.[c];if(!o)throw new Error(`weight: ${i} subset: ${c} is not available for '${t.fontFamily}'`);let F=`${t.fontFamily}-${a}-${i}-${c}`;const U=e[F];if(U){f.push(U);continue}const l=(0,n.IH)(`Fetching ${t.fontFamily} font ${JSON.stringify({style:a,weight:i,subset:c})}`),h=new FontFace(t.fontFamily,`url(${o}) format('woff2')`,{weight:i,style:a,unicodeRange:t.unicodeRanges[c]}),m=h.load().then((()=>{(s?.document??document).fonts.add(h),(0,n._8)(l)})).catch((t=>{throw e[F]=void 0,t}));e[F]=m,f.push(m)}}}return{fontFamily:t.fontFamily,fonts:t.fonts,unicodeRanges:t.unicodeRanges,waitUntilDone:()=>Promise.all(f).then((()=>{}))}})(f(),t,o)}}]);
//# sourceMappingURL=931976.a3e93f19.chunk.js.map