"use strict";(self.webpackChunksunshine_image_generator=self.webpackChunksunshine_image_generator||[]).push([[859065],{859065:(t,n,o)=>{o.r(n),o.d(n,{fontFamily:()=>i,getInfo:()=>f,loadFont:()=>c});var e=o(662166),s={},f=()=>({fontFamily:"Ubuntu Condensed",importName:"UbuntuCondensed",version:"v16",url:"https://fonts.googleapis.com/css2?family=Ubuntu+Condensed:ital,wght@0,400",unicodeRanges:{"cyrillic-ext":"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",cyrillic:"U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116","greek-ext":"U+1F00-1FFF",greek:"U+0370-0377, U+037A-037F, U+0384-038A, U+038C, U+038E-03A1, U+03A3-03FF","latin-ext":"U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF",latin:"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD"},fonts:{normal:{400:{"cyrillic-ext":"https://fonts.gstatic.com/s/ubuntucondensed/v16/u-4k0rCzjgs5J7oXnJcM_0kACGMtT-3fq8Ho.woff2",cyrillic:"https://fonts.gstatic.com/s/ubuntucondensed/v16/u-4k0rCzjgs5J7oXnJcM_0kACGMtT-Tfq8Ho.woff2","greek-ext":"https://fonts.gstatic.com/s/ubuntucondensed/v16/u-4k0rCzjgs5J7oXnJcM_0kACGMtT-zfq8Ho.woff2",greek:"https://fonts.gstatic.com/s/ubuntucondensed/v16/u-4k0rCzjgs5J7oXnJcM_0kACGMtT-Pfq8Ho.woff2","latin-ext":"https://fonts.gstatic.com/s/ubuntucondensed/v16/u-4k0rCzjgs5J7oXnJcM_0kACGMtT-7fq8Ho.woff2",latin:"https://fonts.gstatic.com/s/ubuntucondensed/v16/u-4k0rCzjgs5J7oXnJcM_0kACGMtT-Dfqw.woff2"}}}}),i="Ubuntu Condensed",c=(t,n)=>((t,n,o)=>{const f=[],i=n?[n]:Object.keys(t.fonts);for(const c of i){if("undefined"===typeof FontFace)continue;if(!t.fonts[c])throw new Error(`The font ${t.fontFamily} does not have a style ${c}`);const n=o?.weights??Object.keys(t.fonts[c]);for(const i of n){if(!t.fonts[c][i])throw new Error(`The font ${t.fontFamily} does not  have a weight ${i} in style ${c}`);const n=o?.subsets??Object.keys(t.fonts[c][i]);for(const u of n){let n=t.fonts[c]?.[i]?.[u];if(!n)throw new Error(`weight: ${i} subset: ${u} is not available for '${t.fontFamily}'`);let U=`${t.fontFamily}-${c}-${i}-${u}`;const a=s[U];if(a){f.push(a);continue}const r=(0,e.IH)(`Fetching ${t.fontFamily} font ${JSON.stringify({style:c,weight:i,subset:u})}`),F=new FontFace(t.fontFamily,`url(${n}) format('woff2')`,{weight:i,style:c,unicodeRange:t.unicodeRanges[u]}),l=F.load().then((()=>{(o?.document??document).fonts.add(F),(0,e._8)(r)})).catch((t=>{throw s[U]=void 0,t}));s[U]=l,f.push(l)}}}return{fontFamily:t.fontFamily,fonts:t.fonts,unicodeRanges:t.unicodeRanges,waitUntilDone:()=>Promise.all(f).then((()=>{}))}})(f(),t,n)}}]);
//# sourceMappingURL=859065.682c12b3.chunk.js.map