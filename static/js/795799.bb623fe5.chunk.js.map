{"version":3,"file":"static/js/795799.bb623fe5.chunk.js","mappings":"sNAEIA,EAAc,CAAC,EA6DfC,EAAUA,KAAA,CACZC,WAAY,SACZC,WAAY,SACZC,QAAS,MACTC,IAAK,oFACLC,cAAe,CACb,eAAgB,0EAChBC,SAAU,wDACVC,WAAY,2JACZ,YAAa,oIACbC,MAAO,sLAETC,MAAO,CACLC,OAAQ,CACN,IAAO,CACL,eAAgB,0EAChBJ,SAAU,0EACVC,WAAY,0EACZ,YAAa,0EACbC,MAAO,wEAET,IAAO,CACL,eAAgB,8EAChBF,SAAU,8EACVC,WAAY,8EACZ,YAAa,8EACbC,MAAO,6EAGXG,OAAQ,CACN,IAAO,CACL,eAAgB,uEAChBL,SAAU,uEACVC,WAAY,uEACZ,YAAa,uEACbC,MAAO,qEAET,IAAO,CACL,eAAgB,2EAChBF,SAAU,2EACVC,WAAY,2EACZ,YAAa,2EACbC,MAAO,6EAKXP,EAAa,SACbW,EAAWA,CAACC,EAAOC,IA5GPC,EAACC,EAAMH,EAAOC,KAC5B,MAAMG,EAAW,GACXC,EAASL,EAAQ,CAACA,GAASM,OAAOC,KAAKJ,EAAKP,OAClD,IAAK,MAAMY,KAAUH,EAAQ,CAC3B,GAAwB,qBAAbI,SACT,SAEF,IAAKN,EAAKP,MAAMY,GACd,MAAM,IAAIE,MAAM,YAAYP,EAAKf,oCAAoCoB,KAEvE,MAAMG,EAAUV,GAASU,SAAWL,OAAOC,KAAKJ,EAAKP,MAAMY,IAC3D,IAAK,MAAMI,KAAUD,EAAS,CAC5B,IAAKR,EAAKP,MAAMY,GAAQI,GACtB,MAAM,IAAIF,MAAM,YAAYP,EAAKf,sCAAsCwB,cAAmBJ,KAE5F,MAAMK,EAAUZ,GAASY,SAAWP,OAAOC,KAAKJ,EAAKP,MAAMY,GAAQI,IACnE,IAAK,MAAME,KAAUD,EAAS,CAC5B,IAAIE,EAAOZ,EAAKP,MAAMY,KAAUI,KAAUE,GAC1C,IAAKC,EACH,MAAM,IAAIL,MAAM,WAAWE,aAAkBE,2BAAgCX,EAAKf,eAEpF,IAAI4B,EAAU,GAAGb,EAAKf,cAAcoB,KAAUI,KAAUE,IACxD,MAAMG,EAAkB/B,EAAY8B,GACpC,GAAIC,EAAiB,CACnBb,EAASc,KAAKD,GACd,QACF,CACA,MAAME,GAASC,EAAAA,EAAAA,IAAY,YAAYjB,EAAKf,mBAAmBiC,KAAKC,UAAU,CAC5EtB,MAAOQ,EACPI,SACAE,cAEIS,EAAW,IAAId,SAASN,EAAKf,WAAY,OAAO2B,qBAAyB,CAC7EH,SACAZ,MAAOQ,EACPgB,aAAcrB,EAAKX,cAAcsB,KAE7BW,EAAUF,EAASG,OAAOC,MAAK,MAClC1B,GAAS2B,UAAYA,UAAUhC,MAAMiC,IAAIN,IAC1CO,EAAAA,EAAAA,IAAeX,EAAO,IACrBY,OAAOC,IAER,MADA9C,EAAY8B,QAAWiB,EACjBD,CAAG,IAEX9C,EAAY8B,GAAWS,EACvBrB,EAASc,KAAKO,EAChB,CACF,CACF,CACA,MAAO,CACLrC,WAAYe,EAAKf,WACjBQ,MAAOO,EAAKP,MACZJ,cAAeW,EAAKX,cACpB0C,cAAeA,IAAMC,QAAQC,IAAIhC,GAAUuB,MAAK,KACxC,IAET,EAqDMzB,CAAUf,IAAWa,EAAOC,E","sources":["../node_modules/@remotion/google-fonts/dist/esm/Andika.mjs"],"sourcesContent":["// src/base.ts\nimport {continueRender, delayRender} from \"remotion\";\nvar loadedFonts = {};\nvar loadFonts = (meta, style, options) => {\n  const promises = [];\n  const styles = style ? [style] : Object.keys(meta.fonts);\n  for (const style2 of styles) {\n    if (typeof FontFace === \"undefined\") {\n      continue;\n    }\n    if (!meta.fonts[style2]) {\n      throw new Error(`The font ${meta.fontFamily} does not have a style ${style2}`);\n    }\n    const weights = options?.weights ?? Object.keys(meta.fonts[style2]);\n    for (const weight of weights) {\n      if (!meta.fonts[style2][weight]) {\n        throw new Error(`The font ${meta.fontFamily} does not  have a weight ${weight} in style ${style2}`);\n      }\n      const subsets = options?.subsets ?? Object.keys(meta.fonts[style2][weight]);\n      for (const subset of subsets) {\n        let font = meta.fonts[style2]?.[weight]?.[subset];\n        if (!font) {\n          throw new Error(`weight: ${weight} subset: ${subset} is not available for '${meta.fontFamily}'`);\n        }\n        let fontKey = `${meta.fontFamily}-${style2}-${weight}-${subset}`;\n        const previousPromise = loadedFonts[fontKey];\n        if (previousPromise) {\n          promises.push(previousPromise);\n          continue;\n        }\n        const handle = delayRender(`Fetching ${meta.fontFamily} font ${JSON.stringify({\n          style: style2,\n          weight,\n          subset\n        })}`);\n        const fontFace = new FontFace(meta.fontFamily, `url(${font}) format('woff2')`, {\n          weight,\n          style: style2,\n          unicodeRange: meta.unicodeRanges[subset]\n        });\n        const promise = fontFace.load().then(() => {\n          (options?.document ?? document).fonts.add(fontFace);\n          continueRender(handle);\n        }).catch((err) => {\n          loadedFonts[fontKey] = undefined;\n          throw err;\n        });\n        loadedFonts[fontKey] = promise;\n        promises.push(promise);\n      }\n    }\n  }\n  return {\n    fontFamily: meta.fontFamily,\n    fonts: meta.fonts,\n    unicodeRanges: meta.unicodeRanges,\n    waitUntilDone: () => Promise.all(promises).then(() => {\n      return;\n    })\n  };\n};\n\n// src/Andika.ts\nvar getInfo = () => ({\n  fontFamily: \"Andika\",\n  importName: \"Andika\",\n  version: \"v25\",\n  url: \"https://fonts.googleapis.com/css2?family=Andika:ital,wght@0,400;0,700;1,400;1,700\",\n  unicodeRanges: {\n    \"cyrillic-ext\": \"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F\",\n    cyrillic: \"U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116\",\n    vietnamese: \"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+0300-0301, U+0303-0304, U+0308-0309, U+0323, U+0329, U+1EA0-1EF9, U+20AB\",\n    \"latin-ext\": \"U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF\",\n    latin: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD\"\n  },\n  fonts: {\n    italic: {\n      \"400\": {\n        \"cyrillic-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem9Ya6iyW-Lwqgwb4YfcrgmVA.woff2\",\n        cyrillic: \"https://fonts.gstatic.com/s/andika/v25/mem9Ya6iyW-Lwqgwb4YWcrgmVA.woff2\",\n        vietnamese: \"https://fonts.gstatic.com/s/andika/v25/mem9Ya6iyW-Lwqgwb4YdcrgmVA.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem9Ya6iyW-Lwqgwb4YccrgmVA.woff2\",\n        latin: \"https://fonts.gstatic.com/s/andika/v25/mem9Ya6iyW-Lwqgwb4YScrg.woff2\"\n      },\n      \"700\": {\n        \"cyrillic-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem6Ya6iyW-Lwqgwb46pV60Udc1UAw.woff2\",\n        cyrillic: \"https://fonts.gstatic.com/s/andika/v25/mem6Ya6iyW-Lwqgwb46pV60ddc1UAw.woff2\",\n        vietnamese: \"https://fonts.gstatic.com/s/andika/v25/mem6Ya6iyW-Lwqgwb46pV60Wdc1UAw.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem6Ya6iyW-Lwqgwb46pV60Xdc1UAw.woff2\",\n        latin: \"https://fonts.gstatic.com/s/andika/v25/mem6Ya6iyW-Lwqgwb46pV60Zdc0.woff2\"\n      }\n    },\n    normal: {\n      \"400\": {\n        \"cyrillic-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem_Ya6iyW-LwqgwZ7YQarw.woff2\",\n        cyrillic: \"https://fonts.gstatic.com/s/andika/v25/mem_Ya6iyW-LwqgwbrYQarw.woff2\",\n        vietnamese: \"https://fonts.gstatic.com/s/andika/v25/mem_Ya6iyW-LwqgwZbYQarw.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem_Ya6iyW-LwqgwZLYQarw.woff2\",\n        latin: \"https://fonts.gstatic.com/s/andika/v25/mem_Ya6iyW-LwqgwarYQ.woff2\"\n      },\n      \"700\": {\n        \"cyrillic-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem8Ya6iyW-Lwqg40ZMFWJ0bbck.woff2\",\n        cyrillic: \"https://fonts.gstatic.com/s/andika/v25/mem8Ya6iyW-Lwqg40ZMFUZ0bbck.woff2\",\n        vietnamese: \"https://fonts.gstatic.com/s/andika/v25/mem8Ya6iyW-Lwqg40ZMFWp0bbck.woff2\",\n        \"latin-ext\": \"https://fonts.gstatic.com/s/andika/v25/mem8Ya6iyW-Lwqg40ZMFW50bbck.woff2\",\n        latin: \"https://fonts.gstatic.com/s/andika/v25/mem8Ya6iyW-Lwqg40ZMFVZ0b.woff2\"\n      }\n    }\n  }\n});\nvar fontFamily = \"Andika\";\nvar loadFont = (style, options) => {\n  return loadFonts(getInfo(), style, options);\n};\nexport {\n  loadFont,\n  getInfo,\n  fontFamily\n};\n"],"names":["loadedFonts","getInfo","fontFamily","importName","version","url","unicodeRanges","cyrillic","vietnamese","latin","fonts","italic","normal","loadFont","style","options","loadFonts","meta","promises","styles","Object","keys","style2","FontFace","Error","weights","weight","subsets","subset","font","fontKey","previousPromise","push","handle","delayRender","JSON","stringify","fontFace","unicodeRange","promise","load","then","document","add","continueRender","catch","err","undefined","waitUntilDone","Promise","all"],"sourceRoot":""}